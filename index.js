const { Telegraf, Markup } = require('telegraf');
const express = require('express');

const app = express();
const bot = new Telegraf(process.env.BOT_TOKEN);
const PORT = process.env.PORT || 3000;

// –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏ (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–î)
const userStates = new Map();

console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –õ–µ–≥–∏–æ–Ω–∞...');

// –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
bot.start((ctx) => {
  userStates.set(ctx.from.id, { step: 'nickname' });
  return ctx.reply(
    'üèõÔ∏è –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, –±—É–¥—É—â–∏–π –ª–µ–≥–∏–æ–Ω–µ—Ä! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ Legio Caesaris.\n\n' +
    '–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —Å–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –≤ Minecraft:'
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  const userId = ctx.from.id;
  const state = userStates.get(userId) || {};
  const text = ctx.message.text.trim();

  try {
    switch (state.step) {
      case 'nickname':
        if (text.length < 2 || text.length > 20) {
          return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º (–æ—Ç 2 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤):');
        }
        state.nickname = text;
        state.step = 'age';
        return ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç?');

      case 'age':
        const age = parseInt(text);
        if (isNaN(age) || age < 13 || age > 99) {
          return ctx.reply('–í –õ–µ–≥–∏–æ–Ω –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å 13 –ª–µ—Ç. –£–∫–∞–∂–∏ –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç:');
        }
        state.age = age;
        state.step = 'experience';
        return ctx.reply('–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ –∏–≥—Ä—ã –≤ Minecraft (–∫–∞–∫ –¥–∞–≤–Ω–æ –∏–≥—Ä–∞–µ—à—å, —á—Ç–æ —É–º–µ–µ—à—å):');

      case 'experience':
        state.experience = text;
        state.step = 'motivation';
        return ctx.reply('–ü–æ—á–µ–º—É —Ç—ã —Ö–æ—á–µ—à—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –Ω–∞—à –õ–µ–≥–∏–æ–Ω? –ß—Ç–æ —Ç–µ–±—è –ø—Ä–∏–≤–ª–µ–∫–ª–æ?');

      case 'motivation':
        const applicationText = `
üéØ –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –í –õ–ï–ì–ò–û–ù!

–ù–∏–∫–Ω–µ–π–º: ${state.nickname}
–í–æ–∑—Ä–∞—Å—Ç: ${state.age}
–û–ø—ã—Ç: ${state.experience}
–ú–æ—Ç–∏–≤–∞—Ü–∏—è: ${text}

–û—Ç: @${ctx.from.username || '–Ω–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞'}
ID: ${userId}
ID –∑–∞—è–≤–∫–∏: #LC-${Date.now()}
        `.trim();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –∫–∞–Ω–∞–ª
        await ctx.telegram.sendMessage(
          process.env.CHAT_ID,
          applicationText,
          Markup.inlineKeyboard([
            [Markup.button.callback('‚úÖ –ü—Ä–∏–Ω—è—Ç—å', `accept_${userId}`)],
            [Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_${userId}`)]
          ])
        );

        userStates.delete(userId);
        return ctx.reply(
          '‚úÖ –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –°–µ–Ω–∞—Ç—É!\n\n' +
          '–û–∂–∏–¥–∞–π —Ä–µ—à–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤. –°–ª–µ–¥–∏ –∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏!\n\n' +
          'Ave! ‚öîÔ∏è'
        );

      default:
        return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –≤ –õ–µ–≥–∏–æ–Ω.');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
    return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.');
  }

  userStates.set(userId, state);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
bot.action(/accept_(.+)/, async (ctx) => {
  const userId = ctx.match[1];
  
  try {
    await ctx.editMessageText(
      `‚úÖ –ó–ê–Ø–í–ö–ê –ü–†–ò–ù–Ø–¢–ê –°–µ–Ω–∞—Ç–æ–º\n\n${ctx.update.callback_query.message.text}`
    );
    
    await ctx.telegram.sendMessage(
      userId,
      'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –≤ –õ–µ–≥–∏–æ–Ω –æ–¥–æ–±—Ä–µ–Ω–∞!\n\n' +
      '–°–µ–Ω–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.\n\n' +
      '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä—è–¥—ã –õ–µ–≥–∏–æ–Ω–∞! Ave! ‚öîÔ∏è'
    );
    
    console.log(`–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏:', error);
  }
});

bot.action(/reject_(.+)/, async (ctx) => {
  const userId = ctx.match[1];
  
  try {
    await ctx.editMessageText(
      `‚ùå –ó–ê–Ø–í–ö–ê –û–¢–ö–õ–û–ù–ï–ù–ê –°–µ–Ω–∞—Ç–æ–º\n\n${ctx.update.callback_query.message.text}`
    );
    
    await ctx.telegram.sendMessage(
      userId,
      '–¢–≤–æ—è –∑–∞—è–≤–∫–∞ –≤ –õ–µ–≥–∏–æ–Ω, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n' +
      '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—è–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å! –í–æ–∑–º–æ–∂–Ω–æ, —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.'
    );
    
    console.log(`–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error(`–û—à–∏–±–∫–∞ –¥–ª—è ${ctx.updateType}:`, err);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
  console.log('üèõÔ∏è –ë–æ—Ç –õ–µ–≥–∏–æ–Ω–∞ –¶–µ–∑–∞—Ä—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
}).catch(err => {
  console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err);
});

// Express —Å–µ—Ä–≤–µ—Ä –¥–ª—è Railway
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html>
    <head>
      <title>Legio Caesaris Bot</title>
      <style>
        body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
        .header { color: #8B4513; font-size: 2.5em; }
        .status { color: #2E8B57; font-size: 1.5em; margin: 20px 0; }
        .footer { color: #666; margin-top: 30px; }
      </style>
    </head>
    <body>
      <div class="header">üèõÔ∏è Legio Caesaris Bot</div>
      <div class="status">‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!</div>
      <div class="footer">–ë–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –≤ —Ä–∏–º—Å–∫–∏–π –∫–ª–∞–Ω Minecraft</div>
    </body>
    </html>
  `);
});

app.listen(PORT, () => {
  console.log(`üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// Graceful shutdown
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
bot.command('getid', (ctx) => {
  const chatId = ctx.chat.id;
  const chatType = ctx.chat.type;
  const chatTitle = ctx.chat.title || '–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è';
  
  return ctx.reply(`
üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ß–ê–¢–ï:

üí¨ –ù–∞–∑–≤–∞–Ω–∏–µ: ${chatTitle}
üÜî Chat ID: \`${chatId}\`
üìÅ –¢–∏–ø: ${chatType}

‚ö†Ô∏è –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç ID –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π CHAT_ID –≤ Railway
  `.trim(), { parse_mode: 'Markdown' });
});

// –¢–∞–∫–∂–µ –¥–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
bot.on('message', (ctx) => {
  console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ:', ctx.chat.id, '–ù–∞–∑–≤–∞–Ω–∏–µ:', ctx.chat.title);
});
